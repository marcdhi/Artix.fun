/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ArtifactMemeContestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "hasVoted"
      | "initialize"
      | "memes"
      | "owner"
      | "renounceOwnership"
      | "submitMeme"
      | "transferOwnership"
      | "updateVotingConfiguration"
      | "userVotedMemes"
      | "voteMeme"
      | "votingConfiguration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MemeSubmitted"
      | "MemeWinner"
      | "OwnershipTransferred"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "memes", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitMeme",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingConfiguration",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userVotedMemes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteMeme",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingConfiguration",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVotedMemes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteMeme", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingConfiguration",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeSubmittedEvent {
  export type InputTuple = [
    memeId: BigNumberish,
    creator: AddressLike,
    ipfsHash: string,
    title: string,
    networkId: BigNumberish
  ];
  export type OutputTuple = [
    memeId: bigint,
    creator: string,
    ipfsHash: string,
    title: string,
    networkId: bigint
  ];
  export interface OutputObject {
    memeId: bigint;
    creator: string;
    ipfsHash: string;
    title: string;
    networkId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemeWinnerEvent {
  export type InputTuple = [
    memeId: BigNumberish,
    creator: AddressLike,
    voteCount: BigNumberish
  ];
  export type OutputTuple = [
    memeId: bigint,
    creator: string,
    voteCount: bigint
  ];
  export interface OutputObject {
    memeId: bigint;
    creator: string;
    voteCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    memeId: BigNumberish,
    voter: AddressLike,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    memeId: bigint,
    voter: string,
    votingPower: bigint
  ];
  export interface OutputObject {
    memeId: bigint;
    voter: string;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtifactMemeContest extends BaseContract {
  connect(runner?: ContractRunner | null): ArtifactMemeContest;
  waitForDeployment(): Promise<this>;

  interface: ArtifactMemeContestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _maxVotes: BigNumberish,
      _contestDuration: BigNumberish,
      _minVotesForWin: BigNumberish,
      _voteCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  memes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        creator: string;
        ipfsHash: string;
        title: string;
        description: string;
        socialLinks: string;
        networkId: bigint;
        voteCount: bigint;
        submissionTime: bigint;
        isActive: boolean;
        hasBeenMinted: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitMeme: TypedContractMethod<
    [
      ipfsHash: string,
      title: string,
      description: string,
      socialLinks: string,
      networkId: BigNumberish
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVotingConfiguration: TypedContractMethod<
    [
      _maxVotes: BigNumberish,
      _contestDuration: BigNumberish,
      _minVotesForWin: BigNumberish,
      _voteCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userVotedMemes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  voteMeme: TypedContractMethod<[memeId: BigNumberish], [void], "payable">;

  votingConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        maxVotes: bigint;
        contestDuration: bigint;
        minVotesForWin: bigint;
        voteCost: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _maxVotes: BigNumberish,
      _contestDuration: BigNumberish,
      _minVotesForWin: BigNumberish,
      _voteCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "memes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        id: bigint;
        creator: string;
        ipfsHash: string;
        title: string;
        description: string;
        socialLinks: string;
        networkId: bigint;
        voteCount: bigint;
        submissionTime: bigint;
        isActive: boolean;
        hasBeenMinted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitMeme"
  ): TypedContractMethod<
    [
      ipfsHash: string,
      title: string,
      description: string,
      socialLinks: string,
      networkId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVotingConfiguration"
  ): TypedContractMethod<
    [
      _maxVotes: BigNumberish,
      _contestDuration: BigNumberish,
      _minVotesForWin: BigNumberish,
      _voteCost: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userVotedMemes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "voteMeme"
  ): TypedContractMethod<[memeId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "votingConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        maxVotes: bigint;
        contestDuration: bigint;
        minVotesForWin: bigint;
        voteCost: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MemeSubmitted"
  ): TypedContractEvent<
    MemeSubmittedEvent.InputTuple,
    MemeSubmittedEvent.OutputTuple,
    MemeSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "MemeWinner"
  ): TypedContractEvent<
    MemeWinnerEvent.InputTuple,
    MemeWinnerEvent.OutputTuple,
    MemeWinnerEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MemeSubmitted(uint256,address,string,string,uint256)": TypedContractEvent<
      MemeSubmittedEvent.InputTuple,
      MemeSubmittedEvent.OutputTuple,
      MemeSubmittedEvent.OutputObject
    >;
    MemeSubmitted: TypedContractEvent<
      MemeSubmittedEvent.InputTuple,
      MemeSubmittedEvent.OutputTuple,
      MemeSubmittedEvent.OutputObject
    >;

    "MemeWinner(uint256,address,uint256)": TypedContractEvent<
      MemeWinnerEvent.InputTuple,
      MemeWinnerEvent.OutputTuple,
      MemeWinnerEvent.OutputObject
    >;
    MemeWinner: TypedContractEvent<
      MemeWinnerEvent.InputTuple,
      MemeWinnerEvent.OutputTuple,
      MemeWinnerEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
